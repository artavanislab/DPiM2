#include "Network.hpp"
#include "rapidjson/document.h"
#include <boost/lexical_cast.hpp>
#include <boost/foreach.hpp>
#include <iostream>
#include <fstream>
#include <cmath>
//#include <boost/algorithm/string.hpp>

#ifndef DOUBLE_VECTOR
#define DOUBLE_VECTOR 1
typedef std::vector< double > doubleVector;
#endif
#ifndef DOUBLE_VECTOR_VECTOR
#define DOUBLE_VECTORP_VECTOR 1
typedef std::vector< doubleVector > doubleVectorVector; 
#endif

namespace rj = rapidjson;

/*
 * Public Methods
 */

Network::Network() { std::cout.precision(4); };
Network::~Network() {  };

Network::Network(size_t nProt) {
  std::cout.precision(4);
  stats = MatrixRunningStat(nProt);
  if (nProt > 0) {
    stats.clear();
  }
}

Network::Network(const stringVector& jsonFiles, size_t nProt) {
  std::cout.precision(4);
  stats = MatrixRunningStat(nProt);
  if (nProt > 0) {
    stats.clear();
  }
  std::cout << "nProt = " << nProt << std::endl;
  
  BOOST_FOREACH(const std::string f, jsonFiles) {
    std::cout << "\treading " << f << "..." << std::endl;
    addJson(f);
    
    /*
    stats.dump();
      DEBUG
    std::cout << nRun << "\t";
    if (stats.count(prot1) > 0 && stats.at(prot1).count(prot2) > 0) {
      std::cout << stats.at(prot1).at(prot2).Mean()
		<< "\t" << stats.at(prot1).at(prot2).NumDataValues()
		<< std::endl;
    } else {
      std::cout << "no\n";
    }
    */
  }
}

size_t Network::size() const {
  return allProteins.size();
}

double Network::mean(std::string fbgn1, std::string fbgn2) const {
  size_t row = allProteins.left.at(fbgn1);
  size_t col = allProteins.left.at(fbgn2);
  if (row > col) {
    std::swap(row, col);
  }
  return stats.mean(row,col);
}
double Network::var (std::string  fbgn1, std::string fbgn2) {
  size_t row = allProteins.left.at(fbgn1);
  size_t col = allProteins.left.at(fbgn2);
  if (row > col) {
    std::swap(row, col);
  }
  return stats.variance(row,col);
}
double Network::sd (std::string  fbgn1, std::string fbgn2) {
  return std::sqrt(var(fbgn1, fbgn2));
} 

symMat Network::mean() const {
  return stats.mean();
}
symMat Network::var () {
  return stats.variance();
}

/*
 * Private Methods
 */

void Network::addJson(const std::string& jsonFile) {
  //std::cout << "\t\tslurping" << std::endl;
  std::string json = slurp(jsonFile);
  //std::cout << "\t\t\tjson.size() = " << json.size() << std::endl;

  // parse
  //std::cout << "\t\tparsing" << std::endl;
  rj::Document jsonObj;
  jsonObj.Parse(json.c_str());

  // verify that the json looks correct
  //std::cout << "\t\tverify..." << std::endl;
  assert(jsonObj.IsObject());
  assert(jsonObj.HasMember("score"));
  assert(jsonObj["score"].IsObject());
  assert(jsonObj.HasMember("ids"));
  assert(jsonObj["ids"].IsObject());

  //std::cout << "\t\tlocalProteins...\n";
  stringIBimap localProteins = mapLocalProteins(jsonObj["ids"].MemberBegin(),
					     jsonObj["ids"].MemberEnd());
  updateAllProteins(localProteins);
  //std::cout << "\t\tupdateStats..\n";
  updateStats(jsonObj["score"].MemberBegin(), jsonObj["score"].MemberEnd(),
	      localProteins);

  // std::cout << "I love peanuts!\n"; // DEBUG
}

stringIBimap Network::mapLocalProteins(rj::Value::ConstMemberIterator begin,
				   rj::Value::ConstMemberIterator end)
{
  typedef stringIBimap::value_type keyValue;
  stringIBimap ret;
  std::string fbgn;
  size_t id;
  rj::Value::ConstMemberIterator p1;
  size_t maxId = 0;
  for (p1 = begin; p1 != end; ++p1) {
    id = boost::lexical_cast<size_t>(p1->name.GetString());
    fbgn = p1->value.GetString();
    //std::cout << "(fbgn, id) = ( "<< fbgn << ", " << id << ")\n"; // DEBUG
    ret.insert(keyValue(fbgn, id));
    if (maxId < id) {
      maxId = id;
    }
  }

  return ret;
}

void Network::updateAllProteins(const stringIBimap& localProteins) {
  typedef stringIBimap::value_type keyValue;
  stringIBimap::const_iterator prot;
  for (prot=localProteins.begin(); prot!=localProteins.end(); ++prot) {
    if (allProteins.left.count(prot->left) == 0) {
      //std::cout << "inserting " << prot->left << " at " << allProteins.size()
      // << std::endl; // DEBUG
      allProteins.insert(keyValue(prot->left, allProteins.size()));
    }
  }
  if (allProteins.size() > stats.size()) {
    stats.resize(allProteins.size());
  }
  return;
}

void Network::updateStats(rj::Value::ConstMemberIterator begin,
			  rj::Value::ConstMemberIterator end,
			  const stringIBimap& localProteins)
{
  // the json is sparse, but here we have to keep track of the zeroes
  // so we start by filling a matrix with zeroes
  symMat scores(stats.size(), stats.size());
  scores.clear();
  
  //std::cout << "\t\t\tparse jsonObj -- stats.size " << stats.size() << "\n";
  rj::Value::ConstMemberIterator p1, p2;
  size_t i1, i2;
  size_t row, col;
  std::string prot1, prot2;
  for (p1 = begin; p1 != end; ++p1) {
    i1 = boost::lexical_cast<size_t>(p1->name.GetString());
    prot1 = localProteins.right.at(i1);
    //std::cout << "\t\t\tseek localProteins.right.at(" << i1 << ")\n"; // DEBUG
    for (p2 = p1->value.MemberBegin(); p2 != p1->value.MemberEnd(); ++p2) {
      i2 = boost::lexical_cast<size_t>(p2->name.GetString());
      prot2 = localProteins.right.at(i2);
      row = allProteins.left.at(prot1);
      col = allProteins.left.at(prot2);
      if (row > col) {
	std::swap(row, col);
      }
      scores(row,col) = p2->value.GetDouble();
    }
  }

  //std::cout << "\t\t\tadd values to stats\n";
  stats.push(scores);

  return;
}

std::string Network::slurp(const std::string& inFile) {
  std::ifstream in(inFile);
  if (in) {
    std::string contents;
    in.seekg(0, std::ios::end);
    contents.resize(in.tellg());
    in.seekg(0, std::ios::beg);
    in.read(&contents[0], contents.size());
    in.close();
    return(contents);
  }
  throw(errno);
}
