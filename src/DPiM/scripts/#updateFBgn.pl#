#!/usr/bin/env perl

use feature ':5.10'; 
use strict;
use warnings;
use Getopt::Long;
use Data::Dumper;
use HomeBrew::IO qw(checkExist readCols);
use DpimLib qw(getLineDP4APMS);

# update old fbgn's to new ones

my %opts = getCommandLineOptions();

{
    my $in = $opts{in};
    my $out = $opts{out};
    my $refMap = $opts{ref};
    my $mode = $opts{mode};

    if ($mode eq 'apms') {
	# repeat any prey with more than one match
	# select the "best" bait where necessary
	apmsUpdate($in, $out, $refMap);
    } elsif ($mode eq 'network') {
	# repeat any interaction with more than one match
	networkUpdate($in, $out, $refMap);
    } elsif ($mode eq 'rough') {
	# raw search/replace
	roughUpdate($in, $out, $refMap);
    } else {
	die "unknown mode '$mode'";
    }
}

exit;

   ####### +  +  +  +  + ### 
  #####  Subroutines  #####  
 ### +  +  +  +  + #######   

sub getCommandLineOptions {
    # mode:
    my @modes = qw(apms network raw);
    my %modes = map {$_ => 1} @modes;
    my @arr = @modes;
    $arr[0] = "*".$arr[0]."*";
    my $modeString = "-mode ".join("/", @arr);

    my %defaults = (
	ref=>'/home/glocke/DPiM/prevDPIM/FlyBase_IDs_FB2016_01.txt',
	);
    my $defaultString = 
	join " ", map { "-$_ $defaults{$_}" } sort keys %defaults;

    my $usage = "usage: $0 -in input -out output < $defaultString -findkeys>\n";

    my %opts = ();
    GetOptions(\%opts, "in=s", "out=s", "ref=s", "findkeys");
    die $usage unless exists $opts{in} && exists $opts{out};

    for my $k (keys %defaults) {
	$opts{$k} //= $defaults{$k};
    }

    checkExist('f', $opts{in});
    checkExist('f', $opts{ref});

    die "you must select one of the following modes: ", 
        join(", ",keys(%modes)), "\n" 
	if (exists $opts{mode} && ! exists $modes{$opts{mode}});
    $opts{mode} //= $modes[0];

    return %opts;
}

# ret{old_fbgn} = new_fbgn
sub singleRefMap {
    my ($inFile) = @_;

    my @read = readCols($inFile, [qw(submitted_id current_id converted_id)]);
    my %ret;
    for my $row (@read) {
	die "$row->{current_id} doesn't match $row->{converted_id}"
	    unless $row->{current_id} eq $row->{converted_id};
	next if $row->{submitted_id} eq $row->{current_id};
	if (exists $ret{$row->{submitted_id}}) {
	    $ret{$row->{submitted_id}} = $row->{current_id}
	        if $ret{$row->{submitted_id}} =~ m/^CG\d+$/;
	} else {
	    $ret{$row->{submitted_id}} = $row->{current_id};
	}
    }

    return %ret;
}

# ret{old_fbgn} = [all matches];
sub multiRefMap {
    my ($inFile) = @_;

    my @read = readCols($inFile, [qw(submitted_id current_id converted_id)]);
    my %ret;
    for my $row (@read) {
	die "$row->{current_id} doesn't match $row->{converted_id}"
	    unless $row->{current_id} eq $row->{converted_id};
	next if $row->{submitted_id} eq $row->{current_id};
	$ret{$row->{submitted_id}} //= [];
	push @{$ret{$row->{submitted_id}}}, $row->{current_id};
    }

    return %ret;
}


sub roughUpdate {
    my ($in, $out, $refMap) = @_;
    my %update = singleRefMap($refMap);
    say "\%update constructed";

    open my $IN, "<", $in or die "Can't read from $in. $!";
    open my $OUT, ">", $out or die "Can't write to $out. $!";

    my $cnt = 0;
    while (my $line = <$IN>) {
	for my $old (keys %update) {
	    if (exists $opts{findkeys}) {
		my $flag;
		for my $k (keys %update) {
		    $flag = 1 if $line =~ /$k/;
		}
		print $OUT $line if $flag;
	    } else {
		while ($line =~ s/$old/$update{$old}/g) {
		    $cnt++;
		}
	    }
	}
	print $OUT $line;
    }
    close $IN;
    close $OUT;

    say "made $cnt substitutions";
}

sub apmsUpdate {
    my ($in, $out, $refMap) = @_;

    my %singleUpdate = singleRefMap($refMap);
    my %multiUpdate = multiRefMap($refMap); 
   
    my @cols = qw(search_id       bait_ref        prey_ref        total_peptides  sample_date     ms_inst_run_id);
    
    open my $IN, "<", $in or die "Can't read from $in. $!";
    open my $OUT, ">", $out or die "Can't write to $out. $!";

    say $OUT "# sanitized $in according to $refMap";
    say $OUT join "\t", @cols;

    my %row;
    while (getLineDP4APMS(\%row, $IN)) {
	#say Dumper(\%row);
	$row{bait_ref} = $singleUpdate{$row{bait_ref}} // $row{bait_ref};
	if (exists $multiUpdate{$row{prey_ref}}) {
	    my $preys = $multiUpdate{$row{prey_ref}};
	    for my $p (@$preys) {
		$row{prey_ref} = $p;
		say $OUT join "\t", map { $row{$_} } @cols;
	    }
	} else {
	    say $OUT join "\t", map { $row{$_} } @cols;
	}
    }
    close $OUT;
}

sub networkUpdate {
    my ($in, $out, $refMap) = @_;

    my %multiUpdate = multiRefMap($refMap); 
   
    open my $IN, "<", $in or die "Can't read from $in. $!";
    open my $OUT, ">", $out or die "Can't write to $out. $!";

    say $OUT "# sanitized $in according to $refMap";
    say $OUT join "\t", @cols;

    my %row;
    while (my $line = <$IN>) {
	#say Dumper(\%row);
	chomp $line;
	my ($old1, $old2, $score) = split /\t/ $line;
	if (exists $multiUpdate{$old1} && exists $multiUpdate{$old2}) {
	    my @fb1 = @{ $multiUpdate{$old1} };
	    my @fb2 = @{ $multiUpdate{$old2} };
	    for my $new1 (@fb1) {
		for my $new2 (@fb2) {
		    say $OUT join "\t", $new1, $new2, $score;
		}
	    }
	} elsif (exists $multiUpdate{$old1}) {
	    my @fb1 = @{ $multiUpdate{$old1} };
	    for my $new1 (@fb1) {
		say $OUT join "\t", $new1, $old2, $score;
	    }	    
	} elsif (exists $multiUpdate{$old2}) {
	    my @fb2 = @{ $multiUpdate{$old2} };
	    for my $new2 (@fb2) {
		say $OUT join "\t", $old1, $new2, $score;
	    }	    
	}

    }
    close $OUT;
}
