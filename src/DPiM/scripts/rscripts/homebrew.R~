
dropRowsWithNaN <- function (x, quant=TRUE){
    for (namee in colnames(x)) {
        ##print(namee)
        x <- subset(x, ! is.nan(x[, namee]))
        ##print(nrow(x))
        x <- subset(x, ! is.na(x[, namee]))
        if (quant) {
            x <- subset(x, is.finite(x[, namee]))
        }
        ##print(nrow(x))
    }
    return(x)
}

## split on white-space
qw <- function(x) { unlist(strsplit(x, "[[:space:]]+")) }

jacc <- function(x, y) {
    ter <- length(intersect(x,y))
    ion <- length(union(x,y))
    return(ter/ion)
}

addTrans <- function(color,trans)
{
  # This function adds transparancy to a color.
  # Define transparancy with an integer between 0 and 255
  # 0 being fully transparant and 255 being fully visable
  # Works with either color and trans a vector of equal length,
  # or one of the two of length 1.

  if (length(color)!=length(trans)&!any(c(length(color),length(trans))==1)) stop("Vector lengths not correct")
  if (length(color)==1 & length(trans)>1) color <- rep(color,length(trans))
  if (length(trans)==1 & length(color)>1) trans <- rep(trans,length(color))

  num2hex <- function(x)
  {
    hex <- unlist(strsplit("0123456789ABCDEF",split=""))
    return(paste(hex[(x-x%%16)/16+1],hex[x%%16+1],sep=""))
  }
  rgb <- rbind(col2rgb(color),trans)
  res <- paste("#",apply(apply(rgb,2,num2hex),2,paste,collapse=""),sep="")
  return(res)
}
