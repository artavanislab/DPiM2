## find various statistics on selecting random edges from nrDPiM2 in a fashion representative
## of the actual missing edges

whole <- read.table("~/DPiM/dpim2/dpim2_nrtap.120123.nrBait.58.17.network", header = T)
miss <- read.table("/home/glocke/DPiM/analysis/nrDpim2/edgesMissingFromDpim3.tab", header = T)

totSize <- nrow(whole)
sampSize <- nrow(miss)

nSample <- 100

siz <- c()
largeComp
for (i in 1:nSample) {
    ##x <- sample(totSize, sampSize, prob=(whole$score**-1))
    x <- sample(totSize, sampSize)
    samp <- whole[x,]
    net <- graph_from_data_frame(samp)
    dec <- decompose(net)
    compSizes <- sapply(dec, ecount)
    
    siz <- c(siz, compSizes)
}
hist(siz)


missNet <- graph_from_data_frame(miss)
missDecomp <- decompose(missNet)
missSubSizes <- sapply(missDecomp, function(x) length(E(x)))
collapseTab(missSubSizes)

collapseTab <- function(x) {
    ret = rep(0, 6);

    ret[1] = sum(x == 1)
    ret[2] = sum(x == 2)
    ret[3] = sum(x == 3)
    ret[4] = sum(x == 4)
    ret[5] = sum(x > 4 & x < 1000)
    ret[6] = sum(x >= 1000)

    return(ret);
}
collapseTab(siz)
collapseTab(weightedSize)

biggest <- list()
for (i in 1:nSample) {
    ##x <- sample(totSize, sampSize, prob=(whole$score**-1))
    x <- sample(totSize, sampSize)
    samp <- whole[x,]
    net <- graph_from_data_frame(samp)
    dec <- decompose(net)
    compSizes <- sapply(dec, ecount)
    j <- which(compSizes == max(compSizes))
    biggest[[i]] = dec[[j]]

}

biggestW <- list()
for (i in 1:nSample) {
    ##x <- sample(totSize, sampSize, prob=(whole$score**-1))
    x <- sample(totSize, sampSize)
    samp <- whole[x,]
    net <- graph_from_data_frame(samp)
    dec <- decompose(net)
    compSizes <- sapply(dec, ecount)
    j <- which(compSizes == max(compSizes))
    biggestW[[i]] = dec[[j]]
}


calcMeanDD <- function(gList) {
    dd <- lapply(1:length(gList), function(x) degree.distribution(gList[[x]]))
    mxDegree <- max(sapply(dd, length))-1

    ## sum degree distributions
    meanDD <- rep(0, mxDegree+1);
    
    for (deg in 1:mxDegree) { ## ignore degree=0
        i <- deg+1
        x <- sapply(1:nSample, function (j) dd[[j]][i])
        y <- x[which( sapply(x, function(j) ! is.na(j)) )]
        meanDD[i] <- sum(y) / nSample
    }

    return(meanDD)
}

meanDD <- calcMeanDD(biggest)
meanDDW <- calcMeanDD(biggestW)
    


missDD <- degree.distribution(missNet)
maxMissDeg <- length(missDD) - 1

yMin <- min(meanDD[meanDD > 0], meanDDW[meanDDW > 0])

plot(1:(length(meanDD)-1), meanDD[-1], pch=1, col="red", lwd=2,
     log="xy", xlim=c(1, maxMissDeg), ylim=c(yMin, max(missDD)), 
     xlab="Degree", ylab="Fraction")
points(1:(length(meanDDW)-1), meanDDW[-1], pch=2, col="blue", lwd=2)
points(1:maxMissDeg, missDD[-1], pch=3, lwd=2, col="darkgreen")
legend("topright", legend=c("Missing edges", "Uniform random sample",
                       "Weighted random sample"), lwd=2,
       col=c("darkgreen", "red", "blue"), pch=c(3, 1, 2), bty="n", lty=0)


mean(sapply(biggest, function(x) diameter(x)))
