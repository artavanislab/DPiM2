#!/usr/bin/env perl

use feature ':5.10'; 
use strict;
use warnings;
use Getopt::Long;
use Data::Dumper;
use HomeBrew::IO qw(checkExist);
#use DpimLib qw(getLineDP4APMS);

# describe the purpose for this script

my %opts = getCommandLineOptions();

{
    my $in = $opts{in};
    my $out = $opts{out};

    
    open my $IN, "<", $in or die "can't read $in. $!";
    open my $OUT, ">", $out or die "can't write to $out. $!";
}

exit;

   ####### +  +  +  +  + ### 
  #####  Subroutines  #####  
 ### +  +  +  +  + #######   

sub getCommandLineOptions {

    my %defaults = (
	);
    my $defaultString = 
	join " ", map { "-$_ $defaults{$_}" } sort keys %defaults;

    my $usage = "usage: $0 -in input -out output\n";

    my %opts = ();
    GetOptions(\%opts, "in=s", "out=s");
    die $usage unless exists $opts{in} && exists $opts{out};

    for my $k (keys %defaults) {
	$opts{$k} //= $defaults{$k};
    }

    checkExist('f', $opts{in});

    return %opts;
}

# ret = [[n1, n2], [n1, n2],...] 
#   where $net{$ret[i][0]}{$ret[i][1]} >= $net{$ret[i+1][0]}{$ret[i+1][1]}
sub sortByScore {
    my $net = shift;

    my %sortable;
    for my $n1 (keys %$net) {
	for my $n2 (keys %{ $net->{$n1} }) {
	    my $key = "$n1-$n2";
	    $sortable{$key} = $net->{$n1}{$n2};
	}
    }
    
    my @doubleKeys = sort {$sortable{$b} <=> $sortable{$a}} sort keys %sortable;

    return map { [split /-/, $_] } @doubleKeys;
}
